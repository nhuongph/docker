version: '2'

services:
    applications:
        image: tianon/true
        volumes:
            - ${APPLICATION}:/var/www

    ### Nginx setup
    nginx:
        container_name: ${PROJECT_NAME}_nginx
        build:
            context: ./nginx
            args:
              - PHP_UPSTREAM=php-fpm
              - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        volumes_from:
          - applications
        volumes:
          - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
          - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
        ports:
          - "${NGINX_HOST_HTTP_PORT}:80"
          - "${NGINX_HOST_HTTPS_PORT}:443"
        depends_on:
          - php-fpm
        networks:
          - frontend
          - backend

    ### PHP FPM
    php-fpm:
        container_name: ${PROJECT_NAME}_php-fpm
        build:
            context: ./php-fpm
            args:
              - INSTALL_ZIP_ARCHIVE=${PHP_FPM_INSTALL_ZIP_ARCHIVE}
              - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
              - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
              - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
              - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
              - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
              - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
              - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
            dockerfile: "Dockerfile-${PHP_VERSION}"
        volumes_from:
          - applications
        volumes:
          - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
        expose:
          - "9000"
        depends_on:
          - workspace
        networks:
          - backend

    ### Postgres
    postgres:
      container_name: ${PROJECT_NAME}_postgres
      build: ./postgres
      volumes:
        - ${DATA_SAVE_PATH}/postgres:/var/lib/postgresql/data
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      networks:
        - backend

    ### redis
    redis:
      container_name: ${PROJECT_NAME}_redis
      build: ./redis
      volumes:
        - ${DATA_SAVE_PATH}/redis:/data
      ports:
        - "${REDIS_PORT}:6379"
      networks:
        - backend

    ### dynamodb
    dynamodb:
      container_name: ${PROJECT_NAME}_dynamodb
      build: ./dynamodb
      volumes:
        - ${DATA_SAVE_PATH}/dynamodb:/dynamodb_local_db
      ports:
        - "${DYNAMODB_PORT}:8000"
      networks:
        - backend

    ### Adminer Container
    adminer:
      container_name: ${PROJECT_NAME}_adminer
      build:
        context: ./adminer
      ports:
        - "${ADM_PORT}:8080"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend

    ### Workspace Utilities Container
    workspace:
      container_name: ${PROJECT_NAME}_workspace
      build:
        context: ./workspace
        args:
          - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
          - INSTALL_NODE=${WORKSPACE_INSTALL_NODE}
          - NODE_VERSION=${WORKSPACE_NODE_VERSION}
          - INSTALL_YARN=${WORKSPACE_INSTALL_YARN}
          - YARN_VERSION=${WORKSPACE_YARN_VERSION}
          - INSTALL_PHPREDIS=${WORKSPACE_INSTALL_PHPREDIS}
          - INSTALL_IMAGEMAGICK=${WORKSPACE_INSTALL_IMAGEMAGICK}
          - INSTALL_PG_CLIENT=${WORKSPACE_INSTALL_PG_CLIENT}
          - PUID=${WORKSPACE_PUID}
          - PGID=${WORKSPACE_PGID}
          - TZ=${WORKSPACE_TIMEZONE}
          - INSTALL_PYTHON=${WORKSPACE_INSTALL_PYTHON}
          - INSTALL_MC=${WORKSPACE_INSTALL_MC}
        dockerfile: "Dockerfile-${PHP_VERSION}"
      volumes_from:
        - applications
      depends_on:
        - dynamodb
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      ports:
        - "${WORKSPACE_SSH_PORT}:22"
      tty: true
      networks:
        - frontend
        - backend

### Networks setup
networks:
    frontend:
      driver: "bridge"
    backend:
      driver: "bridge"

### Volumes Setup #############################################
volumes:
  mysql:
    driver: "local"
  postgres:
    driver: "local"
